{{>licenseInfo}}
package {{modelPackage}};

{{#imports}}import {{import}};
{{/imports}}

import java.net.URI;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.time.ZonedDateTime;
import java.time.ZoneId;

import java.util.function.Supplier;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.UUID;

/**
 * Model tests for {{appName}}
 */
public class SampleModelData {

    protected final Random random;

    public SampleModelData(long seed) {
        this.random = new Random(seed);
    }

{{#models}}
{{#model}}
    public {{classname}} sample{{classname}}(String propertyName) {
{{#oneOf}}
{{#-first}}
        //noinspection unchecked
        List<Supplier<{{classname}}>> factories = List.of(
{{/-first}}
{{#discriminator}}{{#-first}}{{#mappedModels}}
            () -> sample{{modelName}}(propertyName){{^-last}},{{/-last}}
{{/mappedModels}}{{/-first}}{{/discriminator}}
{{#-last}}
        );
        return pickOne(factories).get();
{{/-last}}
{{/oneOf}}
{{#isEnum}}
        return pickOne(new {{classname}}[] {
{{#allowableValues}}{{#enumVars}}
            {{classname}}.{{name}},
{{/enumVars}}{{/allowableValues}}
        });
{{/isEnum}}
{{^oneOf}}{{^isEnum}}
        return new {{classname}}()
{{#vars}}
{{#isArray}}
{{^items.isArray}}{{^items.isPrimitiveType}}{{^items.isEnum}}{{^items.isString}}
            .{{name}}(sampleListOf{{{items.datatypeWithEnum}}}("{{name}}"))
{{/items.isString}}{{/items.isEnum}}{{/items.isPrimitiveType}}{{/items.isArray}}
{{^items.isArray}}{{#items.isPrimitiveType}}{{^items.isEnum}}
            .{{name}}(sampleList(() -> random{{{items.datatypeWithEnum}}}("{{name}}"{{#items.dataFormat}}{{#items.isString}}, "{{items.dataFormat}}"{{/items.isString}}{{/items.dataFormat}}), "{{name}}"))
{{/items.isEnum}}{{/items.isPrimitiveType}}{{/items.isArray}}
{{#items.isEnum}}
            .{{name}}(sampleList(() -> sample{{classname}}{{items.datatypeWithEnum}}("{{name}}"), "{{name}}"))
{{/items.isEnum}}
{{#items.isArray}}
            //.{{name}} is too complex to map ({{{items.datatypeWithEnum}}})
{{/items.isArray}}
{{/isArray}}
{{#isMap}}
            //.{{name}} is too complex to map ({{{datatypeWithEnum}}})
{{/isMap}}
{{^isArray}}{{^isMap}}
{{^isPrimitiveType}}{{^isString}}
            .{{name}}(sample{{{datatypeWithEnum}}}("{{name}}"))
{{/isString}}{{/isPrimitiveType}}
{{#isEnum}}
            .{{name}}(sample{{classname}}{{datatypeWithEnum}}("{{name}}"))
{{/isEnum}}
{{#isPrimitiveType}}{{^isEnum}}{{^isString}}
            .{{name}}(random{{datatypeWithEnum}}("{{name}}"))
{{/isString}}{{/isEnum}}{{/isPrimitiveType}}
{{#isString}}{{^isEnum}}
            .{{name}}(random{{datatypeWithEnum}}("{{name}}"{{#isString}}{{#dataFormat}}, "{{dataFormat}}"{{/dataFormat}}{{/isString}}))
{{/isEnum}}{{/isString}}
{{/isMap}}{{/isArray}}
{{/vars}}
            ;
{{/isEnum}}{{/oneOf}}
    }

    public List<{{classname}}> sampleListOf{{classname}}(String propertyName) {
        return sampleList(() -> sample{{classname}}(propertyName), propertyName);
    }
{{#vars}}{{#isEnum}}
{{#isArray}}
    public {{classname}}.{{items.datatypeWithEnum}} sample{{classname}}{{items.datatypeWithEnum}}(String propertyName) {
        return pickOne(new {{classname}}.{{items.datatypeWithEnum}}[] {
{{#allowableValues}}{{#enumVars}}
            {{classname}}.{{items.datatypeWithEnum}}.{{name}},
{{/enumVars}}{{/allowableValues}}
        });
    }
{{/isArray}}
{{^isArray}}
    public {{classname}}.{{datatypeWithEnum}} sample{{classname}}{{datatypeWithEnum}}(String propertyName) {
        return pickOne(new {{classname}}.{{datatypeWithEnum}}[] {
{{#allowableValues}}{{#enumVars}}
            {{classname}}.{{datatypeWithEnum}}.{{name}},
{{/enumVars}}{{/allowableValues}}
        });
    }
{{/isArray}}
{{/isEnum}}{{/vars}}


{{/model}}
{{/models}}

    public <T> List<T> sampleList(Supplier<T> supplier, String propertyName) {
        return sampleList(supplier, propertyName, 1, 1);
    }

    public <T> List<T> sampleList(Supplier<T> supplier, String propertyName, int min, int max) {
        return List.of(supplier.get());
    }

    public String randomString(String propertyName, String dataFormat) {
        return "str" + randomUUID(propertyName, dataFormat);
    }

    public String randomString(String propertyName) {
        return randomString(propertyName, null);
    }

    public UUID randomUUID(String propertyName, String dataFormat) {
        byte[] bytes = new byte[16];
        random.nextBytes(bytes);
        return UUID.nameUUIDFromBytes(bytes);
    }

    public URI randomURI(String propertyName, String dataFormat) {
        return asURI("https://" +
            pickOne(List.of("a", "b", "c")) +
            ".example." +
            pickOne(List.of("com", "net", "io"))
        );
    }

    public Long randomLong(String propertyName) {
        return random.nextLong(10000L);
    }

    public Integer randomInteger(String propertyName) {
        return random.nextInt(10000);
    }

    public Double randomDouble(String propertyName) {
        return random.nextDouble(10000.0);
    }

    public Boolean randomBoolean(String propertyName) {
        return random.nextBoolean();
    }

    public LocalDate sampleLocalDate(String propertyName) {
        return LocalDate.of(2022, 1, 1).plusDays(random.nextInt(1000));
    }

    public LocalTime sampleLocalTime(String propertyName) {
        return LocalTime.of(0, 0).plusMinutes(random.nextInt(24*60));
    }

    public LocalDateTime sampleLocalDateTime(String propertyName) {
        return LocalDateTime.of(
            sampleLocalDate(propertyName), sampleLocalTime(propertyName)
        );
    }

    public ZoneId sampleZoneId(String propertyName) {
        return ZoneId.of(pickOne(ZoneId.getAvailableZoneIds()));
    }

    public ZonedDateTime sampleZonedDateTime(String propertyName) {
        return ZonedDateTime.of(
            sampleLocalDateTime(propertyName), sampleZoneId(propertyName)
        );
    }

    public OffsetDateTime sampleOffsetDateTime(String propertyName) {
        return sampleZonedDateTime(propertyName).toOffsetDateTime();
    }

    public <T> T pickOne(T[] alternatives) {
        return alternatives[random.nextInt(alternatives.length)];
    }

    public <T> T pickOne(List<T> alternatives) {
        return alternatives.get(random.nextInt(alternatives.size()));
    }

    public <T> T pickOne(Set<T> alternatives) {
        return pickOne(new ArrayList<>(alternatives));
    }

    public static URI asURI(String uri) {
        try {
            return new URI(uri);
        } catch (java.net.URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }
}
