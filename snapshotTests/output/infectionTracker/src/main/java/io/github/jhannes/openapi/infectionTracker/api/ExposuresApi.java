/*
 * Infection Tracker
 * Infection Tracker - A case management system for tracking the spread of diseases
 *
 * The version of the OpenAPI document: 1.0.0-draft
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.infectionTracker.api;

import io.github.jhannes.openapi.infectionTracker.ApiCallback;
import io.github.jhannes.openapi.infectionTracker.ApiClient;
import io.github.jhannes.openapi.infectionTracker.ApiException;
import io.github.jhannes.openapi.infectionTracker.ApiResponse;
import io.github.jhannes.openapi.infectionTracker.Configuration;
import io.github.jhannes.openapi.infectionTracker.Pair;
import io.github.jhannes.openapi.infectionTracker.ProgressRequestBody;
import io.github.jhannes.openapi.infectionTracker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.jhannes.openapi.infectionTracker.model.ExposureDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExposuresApi {
    private ApiClient localVarApiClient;

    public ExposuresApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExposuresApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for listExposures
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List exposures that the case worker can follow up </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listExposuresCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/exposures";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listExposuresValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listExposuresCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return ExposureDto
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List exposures that the case worker can follow up </td><td>  -  </td></tr>
     </table>
     */
    public ExposureDto listExposures() throws ApiException {
        ApiResponse<ExposureDto> localVarResp = listExposuresWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;ExposureDto&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List exposures that the case worker can follow up </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExposureDto> listExposuresWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listExposuresValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ExposureDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List exposures that the case worker can follow up </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listExposuresAsync(final ApiCallback<ExposureDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = listExposuresValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ExposureDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateExposure
     * @param exposureId  (required)
     * @param exposureDto  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exposure was registered </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExposureCall(UUID exposureId, ExposureDto exposureDto, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = exposureDto;

        // create path and map variables
        String localVarPath = "/api/exposures/{exposureId}"
            .replaceAll("\\{" + "exposureId" + "\\}", localVarApiClient.escapeString(exposureId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateExposureValidateBeforeCall(UUID exposureId, ExposureDto exposureDto, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'exposureId' is set
        if (exposureId == null) {
            throw new ApiException("Missing the required parameter 'exposureId' when calling updateExposure(Async)");
        }
        

        okhttp3.Call localVarCall = updateExposureCall(exposureId, exposureDto, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param exposureId  (required)
     * @param exposureDto  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exposure was registered </td><td>  -  </td></tr>
     </table>
     */
    public void updateExposure(UUID exposureId, ExposureDto exposureDto) throws ApiException {
        updateExposureWithHttpInfo(exposureId, exposureDto);
    }

    /**
     * 
     * 
     * @param exposureId  (required)
     * @param exposureDto  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exposure was registered </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateExposureWithHttpInfo(UUID exposureId, ExposureDto exposureDto) throws ApiException {
        okhttp3.Call localVarCall = updateExposureValidateBeforeCall(exposureId, exposureDto, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param exposureId  (required)
     * @param exposureDto  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The exposure was registered </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateExposureAsync(UUID exposureId, ExposureDto exposureDto, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateExposureValidateBeforeCall(exposureId, exposureDto, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
