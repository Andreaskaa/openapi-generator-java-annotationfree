/*
 * Infection Tracker
 * Infection Tracker - A case management system for tracking the spread of diseases
 *
 * The version of the OpenAPI document: 1.0.0-draft
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.jhannes.openapi.infectionTracker.model;


import java.net.URI;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.OffsetDateTime;
import java.time.ZonedDateTime;
import java.time.ZoneId;

import java.util.function.Supplier;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.UUID;

/**
 * Model tests for Infection Tracker
 */
public class SampleModelData {

    protected final Random random;

    public SampleModelData(long seed) {
        this.random = new Random(seed);
    }

    public CaseWorkerDto sampleCaseWorkerDto(String propertyName) {

        return new CaseWorkerDto()




            .id(randomUUID("id", "uuid"))






            .fullName(randomString("fullName"))






            .email(randomString("email", "email"))




            .role(sampleCaseWorkerDtoRoleEnum("role"))



            ;

    }

    public List<CaseWorkerDto> sampleListOfCaseWorkerDto(String propertyName) {
        return sampleList(() -> sampleCaseWorkerDto(propertyName), propertyName);
    }

    public CaseWorkerDto.RoleEnum sampleCaseWorkerDtoRoleEnum(String propertyName) {
        return pickOne(new CaseWorkerDto.RoleEnum[] {

            CaseWorkerDto.RoleEnum.ADMINISTRATOR,

            CaseWorkerDto.RoleEnum.INTERVIEWER,

            CaseWorkerDto.RoleEnum.FOLLOWUP,

        });
    }



    public ExposureDto sampleExposureDto(String propertyName) {

        return new ExposureDto()




            .id(randomUUID("id", "uuid"))






            .exposedPersonName(randomString("exposedPersonName"))






            .exposedPersonPhoneNumber(randomString("exposedPersonPhoneNumber", "phone"))




            .exposedDate(sampleLocalDate("exposedDate"))








            .exposureLocation(randomString("exposureLocation"))






            .notes(randomString("notes"))






            .caseWorker(randomUUID("caseWorker", "uuid"))




            .status(sampleExposureDtoStatusEnum("status"))



            ;

    }

    public List<ExposureDto> sampleListOfExposureDto(String propertyName) {
        return sampleList(() -> sampleExposureDto(propertyName), propertyName);
    }

    public ExposureDto.StatusEnum sampleExposureDtoStatusEnum(String propertyName) {
        return pickOne(new ExposureDto.StatusEnum[] {

            ExposureDto.StatusEnum.UNIDENTIFIED,

            ExposureDto.StatusEnum.IDENTIFIED,

            ExposureDto.StatusEnum.CONTACTED,

            ExposureDto.StatusEnum.TESTED,

            ExposureDto.StatusEnum.INFECTED,

        });
    }



    public InfectionDto sampleInfectionDto(String propertyName) {

        return new InfectionDto()




            .id(randomUUID("id", "uuid"))




            .information(sampleInfectionInformationDto("information"))





            .registeredExposures(sampleListOfExposureDto("registeredExposures"))



            ;

    }

    public List<InfectionDto> sampleListOfInfectionDto(String propertyName) {
        return sampleList(() -> sampleInfectionDto(propertyName), propertyName);
    }



    public InfectionInformationDto sampleInfectionInformationDto(String propertyName) {

        return new InfectionInformationDto()




            .patientName(randomString("patientName"))






            .patientPhoneNumber(randomString("patientPhoneNumber", "phone"))




            .likelyInfectionDate(sampleLocalDate("likelyInfectionDate"))








            .notes(randomString("notes"))


            ;

    }

    public List<InfectionInformationDto> sampleListOfInfectionInformationDto(String propertyName) {
        return sampleList(() -> sampleInfectionInformationDto(propertyName), propertyName);
    }




    public <T> List<T> sampleList(Supplier<T> supplier, String propertyName) {
        return sampleList(supplier, propertyName, 1, 1);
    }

    public <T> List<T> sampleList(Supplier<T> supplier, String propertyName, int min, int max) {
        return List.of(supplier.get());
    }

    public String randomString(String propertyName, String dataFormat) {
        return "str" + randomUUID(propertyName, dataFormat);
    }

    public String randomString(String propertyName) {
        return randomString(propertyName, null);
    }

    public UUID randomUUID(String propertyName, String dataFormat) {
        byte[] bytes = new byte[16];
        random.nextBytes(bytes);
        return UUID.nameUUIDFromBytes(bytes);
    }

    public URI randomURI(String propertyName, String dataFormat) {
        return asURI("https://" +
            pickOne(List.of("a", "b", "c")) +
            ".example." +
            pickOne(List.of("com", "net", "io"))
        );
    }

    public Long randomLong(String propertyName) {
        return random.nextLong(10000L);
    }

    public Integer randomInteger(String propertyName) {
        return random.nextInt(10000);
    }

    public Double randomDouble(String propertyName) {
        return random.nextDouble(10000.0);
    }

    public Boolean randomBoolean(String propertyName) {
        return random.nextBoolean();
    }

    public LocalDate sampleLocalDate(String propertyName) {
        return LocalDate.of(2022, 1, 1).plusDays(random.nextInt(1000));
    }

    public LocalTime sampleLocalTime(String propertyName) {
        return LocalTime.of(0, 0).plusMinutes(random.nextInt(24*60));
    }

    public LocalDateTime sampleLocalDateTime(String propertyName) {
        return LocalDateTime.of(
            sampleLocalDate(propertyName), sampleLocalTime(propertyName)
        );
    }

    public ZoneId sampleZoneId(String propertyName) {
        return ZoneId.of(pickOne(ZoneId.getAvailableZoneIds()));
    }

    public ZonedDateTime sampleZonedDateTime(String propertyName) {
        return ZonedDateTime.of(
            sampleLocalDateTime(propertyName), sampleZoneId(propertyName)
        );
    }

    public OffsetDateTime sampleOffsetDateTime(String propertyName) {
        return sampleZonedDateTime(propertyName).toOffsetDateTime();
    }

    public <T> T pickOne(T[] alternatives) {
        return alternatives[random.nextInt(alternatives.length)];
    }

    public <T> T pickOne(List<T> alternatives) {
        return alternatives.get(random.nextInt(alternatives.size()));
    }

    public <T> T pickOne(Set<T> alternatives) {
        return pickOne(new ArrayList<>(alternatives));
    }

    public static URI asURI(String uri) {
        try {
            return new URI(uri);
        } catch (java.net.URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }
}
