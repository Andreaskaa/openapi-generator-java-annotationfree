/*
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key \"special-key\" to test the authorization filters
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.github.jhannes.openapi.petstore.api;

import io.github.jhannes.openapi.petstore.model.*;

import io.github.jhannes.openapi.petstore.model.UserDto;

import org.actioncontroller.actions.*;
import org.actioncontroller.values.*;
import org.actioncontroller.values.json.JsonBody;

import java.io.IOException;
import java.net.URI;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;

public interface UserApi {
    /**
     * Create user
     * This can only be done by the logged in user.
     * @param userDto Created user object (optional)
     */
    @POST("/user")
    public void createUser(
            @JsonBody UserDto userDto
    ) throws IOException;
    /**
     * Creates list of users with given input array
     * @param userDto List of user object (optional
     */
    @POST("/user/createWithArray")
    public void createUsersWithArrayInput(
            @JsonBody List<UserDto> userDto
    ) throws IOException;
    /**
     * Creates list of users with given input array
     * @param userDto List of user object (optional
     */
    @POST("/user/createWithList")
    public void createUsersWithListInput(
            @JsonBody List<UserDto> userDto
    ) throws IOException;
    /**
     * Delete user
     * This can only be done by the logged in user.
     * @param username The name that needs to be deleted (required)
     */
    @DELETE("/user/{username}")
    public void deleteUser(
            @PathParam("username") String username
    ) throws IOException;
    /**
     * Get user by user name
     * @param username The name that needs to be fetched. Use user1 for testing.  (required)
     * @return UserDto
     */
    @GET("/user/{username}")
    @JsonBody
    public UserDto getUserByName(
            @PathParam("username") String username
    ) throws IOException;
    /**
     * Logs user into the system
     * @param username The user name for login (optional)
     * @param password The password for login in clear text (optional)
     * @return String
     */
    @GET("/user/login")
    @JsonBody
    public String loginUser(
            @RequestParam("username") Optional<String> username,
            @RequestParam("password") Optional<String> password
    ) throws IOException;
    /**
     * Logs out current logged in user session
     */
    @GET("/user/logout")
    public void logoutUser(
    ) throws IOException;
    /**
     * Updated user
     * This can only be done by the logged in user.
     * @param username name that need to be deleted (required)
     * @param userDto Updated user object (optional)
     */
    @PUT("/user/{username}")
    public void updateUser(
            @PathParam("username") String username,
            @JsonBody UserDto userDto
    ) throws IOException;
}
