/*
 * Sample API
 * Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
 *
 * The version of the OpenAPI document: 0.1.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.jhannes.openapi.petstore.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.jhannes.openapi.petstore.model.DogAllOfDto;
import io.github.jhannes.openapi.petstore.model.PetDto;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * DogDto
 */

public class DogDto extends PetDto {
  public static final String SERIALIZED_NAME_BARK = "bark";
  @SerializedName(SERIALIZED_NAME_BARK)
  private Boolean bark;

  /**
   * Gets or Sets breed
   */
  @JsonAdapter(BreedEnum.Adapter.class)
  public enum BreedEnum {
    DINGO("Dingo"),
    
    HUSKY("Husky"),
    
    RETRIEVER("Retriever"),
    
    SHEPHERD("Shepherd");

    private String value;

    BreedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BreedEnum fromValue(String value) {
      for (BreedEnum b : BreedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BreedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BreedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BreedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BreedEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_BREED = "breed";
  @SerializedName(SERIALIZED_NAME_BREED)
  private BreedEnum breed;


  public DogDto bark(Boolean bark) {
    
    this.bark = bark;
    return this;
  }

   /**
   * Get bark
   * @return bark
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getBark() {
    return bark;
  }


  public void setBark(Boolean bark) {
    this.bark = bark;
  }


  public DogDto breed(BreedEnum breed) {
    
    this.breed = breed;
    return this;
  }

   /**
   * Get breed
   * @return breed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BreedEnum getBreed() {
    return breed;
  }


  public void setBreed(BreedEnum breed) {
    this.breed = breed;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DogDto dog = (DogDto) o;
    return Objects.equals(this.bark, dog.bark) &&
        Objects.equals(this.breed, dog.breed) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bark, breed, super.hashCode());
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DogDto {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    bark: ").append(toIndentedString(bark)).append("\n");
    sb.append("    breed: ").append(toIndentedString(breed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

